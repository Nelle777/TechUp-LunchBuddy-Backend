require('dotenv').config();
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const app = express();

// Middleware
app.use(express.json());
app.use(cors());

// MongoDB connection
mongoose.connect(process.env.MONGODB_URI)
.then(() => console.log('Connected to MongoDB'))
.catch(err => console.error('MongoDB connection error:', err));

// User Schema
const userSchema = new mongoose.Schema({
    nickname: { type: String, required: true },
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
    role: { type: String, required: true },
    gender: { type: String, required: true },
    foodPreferences: {
        cuisineTypes: [String],
        dietaryRequirements: [String],
        otherRestrictions: String,
        lunchStyle: String
    },
    workLocation: { type: String, required: true },
    genderPreference: { type: String, required: true },
    createdAt: { type: Date, default: Date.now }
});

const User = mongoose.model('User', userSchema);

// API Routes
app.post('/api/register', async (req, res) => {
    try {
        const newUser = new User(req.body);
        await newUser.save();
        res.status(201).json({ message: 'Profile created successfully!' 
});
    } catch (error) {
        if (error.code === 11000) {
            res.status(400).json({ 
                error: "This email is already registered. Please try a " +
                       "different email."    
            });
        } else {
            res.status(400).json({ error: error.message });
        }
    }
});


// Get all users
app.get('/api/users', async (req, res) => {
    try {
        const users = await User.find();
        res.json(users);
    } catch (error) {
        res.status(400).json({ error: error.message });
    }
});

// Login route
app.post('/api/login', async (req, res) => {
    try {
        const { email } = req.body;
        console.log('Login attempt:', email);
        
        const user = await User.findOne({ email });
        
        if (!user) {
            return res.status(401).json({ error: "Invalid credentials" });
        }
        
        res.json({
            message: "Logged in successfully",
            userId: user._id
        });
    } catch (error) {
        console.error('Login error:', error);
        res.status(400).json({ error: error.message });
    }
});

// Get user profile
app.get('/api/profile/:userId', async (req, res) => {
    try {
        console.log('Fetching profile for userId:', req.params.userId);
        const user = await User.findById(req.params.userId);
        console.log('Found user:', user);
        
        if (!user) {
            return res.status(404).json({ error: "User not found" });
        }
        res.json(user);
    } catch (error) {
        console.error('Profile fetch error:', error);
        res.status(400).json({ error: error.message });
    }
});

// Save user changes
app.put('/api/profile/:userId', async (req, res) => {
    try {
        const updatedUser = await User.findByIdAndUpdate(
            req.params.userId,
            { $set: req.body },
            { new: true, runValidators: true }
        );

        if (!updatedUser) {
            return res.status(404).json({ error: 'User not found' });
        }

        res.json(updatedUser);
    } catch (error) {
        console.error('Profile update error:', error);
        res.status(400).json({ error: error.message });
    }
});

// Start server
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log(`Server running on port ${PORT}`);
});
